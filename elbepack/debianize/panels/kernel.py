# ELBE - Debian Based Embedded Rootfilesystem Builder
# Copyright (c) 2016-2017 John Ogness <john.ogness@linutronix.de>
# Copyright (c) 2016-2017 Manuel Traut <manut@linutronix.de>
# Copyright (c) 2017 Torben Hohn <torben.hohn@linutronix.de>
# Copyright (c) 2019 Olivier Dion <dion@linutronix.de>
#
# SPDX-License-Identifier: GPL-3.0-or-later

import os

from shutil import copyfile

from elbepack.debianize.panels.base import Panel
from elbepack.debianize.widgets.edit import Edit
from elbepack.debianize.widgets.radio import RadioGroup

from elbepack.directories import mako_template_dir
from elbepack.templates import template
from elbepack.shellhelper import system


class ImgType(object):
    BZ = "bzImage"
    ZI = "zImage"
    UI = "uImage"
    I = "Image"

class Kernel(Panel):

    match_files = ['Kbuild', 'Kconfig', 'MAINTAINERS', 'kernel/futex.c']

    def __init__(self):

        loadaddr = Edit("Load Addr", "0x800800")
        defconfig = Edit("defconfig", "omap2plus_defconfig")
        imgtype = RadioGroup("Image Format", ImgType, ImgType.BZ)
        cross = Edit("Cross compile", "arm-linux-gnueabihf-")
        k_version = Edit("Kernel version", "4.4")

        grid_elements = [
            {"loadaddr":loadaddr, "defconfig":defconfig},
            {"imgtype":imgtype, "cross_compile":cross},
            {"k_version":k_version}
        ]

        super(Kernel, self).__init__(grid_elements)

    @staticmethod
    def imgtype_to_install(imgtype):
        c = imgtype[0]
        if c == 'z':
            return "zinstall"
        if c == 'u':
            return "uinstall"
        return "install"

    def debianize(self):

        self.deb['imgtype_install'] = Kernel.imgtype_to_install(self.deb['imgtype'])
        self.tmpl_dir = os.path.join(mako_template_dir, 'debianize/kernel')
        pkg_name = self.deb['k_version'] + '-' + self.deb['p_name']

        for tmpl in [
            'control',
            'rules',
            'preinst',
            'postinst',
            'prerm',
                'postrm']:
            with open(os.path.join('debian/', tmpl), 'w') as f:
                mako = os.path.join(self.tmpl_dir, tmpl + '.mako')
                f.write(template(mako, self.deb))

        cmd = 'dch --package linux-' + pkg_name + \
            ' -v ' + self.deb['p_version'] + \
            ' --create -M -D ' + self.deb['release'] + \
            ' "generated by elbe debianize"'
        system(cmd)

        copyfile(os.path.join(self.tmpl_dir, 'linux-image.install'),
                 'debian/linux-image-' + pkg_name + '.install')
        copyfile(os.path.join(self.tmpl_dir, 'linux-headers.install'),
                 'debian/linux-headers-' + pkg_name + '.install')
        copyfile(os.path.join(self.tmpl_dir, 'linux-libc-dev.install'),
                 'debian/linux-libc-dev-' + pkg_name + '.install')

        self.hint = "use 'dpkg-buildpackage -a%s' to build the package" % (
                self.deb['p_arch'])
